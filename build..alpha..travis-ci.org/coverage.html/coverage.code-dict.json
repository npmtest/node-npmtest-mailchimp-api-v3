{"/home/travis/build/npmtest/node-npmtest-mailchimp-api-v3/test.js":"/* istanbul instrument in package npmtest_mailchimp_api_v3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailchimp-api-v3/lib.npmtest_mailchimp_api_v3.js":"/* istanbul instrument in package npmtest_mailchimp_api_v3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mailchimp_api_v3 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mailchimp_api_v3 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mailchimp-api-v3/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mailchimp-api-v3 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mailchimp_api_v3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mailchimp_api_v3\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mailchimp_api_v3.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mailchimp_api_v3.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mailchimp_api_v3.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mailchimp_api_v3.__dirname + '/lib.npmtest_mailchimp_api_v3.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailchimp-api-v3/node_modules/mailchimp-api-v3/index.js":"\"use strict\";\n\nvar request = require('request'),\n    tar   = require('tar'),\n    zlib    = require('zlib'),\n    Promise = require(\"bluebird\"),\n    _       = require('lodash');\n\n\nPromise.config({\n    // Enables all warnings except forgotten return statements.\n    warnings: {\n        wForgottenReturn: false\n    }\n});\n\nfunction Mailchimp (api_key) {\n  var api_key_regex = /.+\\-.+/\n\n  if (!api_key_regex.test(api_key)) {\n    throw new Error('missing or invalid api key: ' + api_key)\n  }\n\n\n  this.__api_key = api_key;\n  this.__base_url = \"https://\"+ this.__api_key.split('-')[1] + \".api.mailchimp.com/3.0\"\n}\n\nvar formatPath = function (path, path_params) {\n\n  if (!path) {\n    path = '/';\n  }\n\n  if (path[0] != '/') {\n    path = '/' + path;\n  }\n\n  if (!path_params) {\n    return path;\n  }\n\n  if (_.isEmpty(path_params)) {\n    return path;\n  }\n\n  path = _.reduce(path_params, function (_path, value, param) {\n    return _path.replace('{'+param+'}', value);\n  }, path)\n  \n  return path;\n\n}\n\nMailchimp.prototype.get = function (options, query, done) {\n  options = _.clone(options) || {};\n\n  if (_.isString(options)) {\n    options = {\n      path : options,\n    }\n  }\n  options.method = 'get';\n\n  if (!done && _.isFunction(query)) {\n    done = query;\n    query = null;\n  }\n\n  if (query && options.query) {\n    console.warn('query set on request options overwritten by argument query');\n  }\n\n  if (query) {\n    options.query = query;\n  }\n\n  return this.request(options, done);\n}\n\nMailchimp.prototype.post = function (options, body, done) {\n  options = _.clone(options) || {};\n\n  if (_.isString(options)) {\n    options = {\n      path : options,\n    }\n  }\n  options.method = 'post';\n\n  if (!done && _.isFunction(body)) {\n    done = body;\n    body = null;\n  }\n\n  if (body && options.body) {\n    console.warn('body set on request options overwritten by argument body');\n  }\n\n  if (body) {\n    options.body = body;\n  }\n\n  return this.request(options, done);\n}\n\nMailchimp.prototype.patch = function (options, body, done) {\n  options = _.clone(options) || {};\n\n  if (_.isString(options)) {\n    options = {\n      path : options,\n    }\n  }\n  options.method = 'patch';\n\n  if (!done && _.isFunction(body)) {\n    done = body;\n    body = null;\n  }\n\n  if (body && options.body) {\n    console.warn('body set on request options overwritten by argument body');\n  }\n\n  if (body) {\n    options.body = body;\n  }\n\n  return this.request(options, done);\n}\n\nMailchimp.prototype.put = function (options, body, done) {\n  options = _.clone(options) || {};\n\n  if (_.isString(options)) {\n    options = {\n      path : options,\n    }\n  }\n  options.method = 'put';\n\n  if (!done && _.isFunction(body)) {\n    done = body;\n    body = null;\n  }\n\n  if (body && options.body) {\n    console.warn('body set on request options overwritten by argument body');\n  }\n\n  if (body) {\n    options.body = body;\n  }\n\n  return this.request(options, done);\n}\n\nMailchimp.prototype.delete = function (options, done) {\n  options = options || {};\n  options = _.clone(options)\n  if (_.isString(options)) {\n    options = {\n      path : options,\n    }\n  }\n  options.method = 'delete';\n  return this.request(options, done);\n}\n\n\nMailchimp.prototype._getAndUnpackBatchResults = function (response_body_url, opts) {\n\n  return new Promise(function (resolve, reject) {\n    var read = request.get(response_body_url);\n\n    var parse = tar.Parse();\n\n    var results = [];\n\n    parse.on('entry', function(entry){\n      if (!entry.path.match(/\\.json/)){\n        return\n      }\n\n      var result_json = '';\n\n      entry.on('data', function (data) {\n        result_json += data.toString();\n      })\n\n      entry.on('error', function (err) {\n        parse.close();\n        entry.close();\n        reject(new Error(err));\n      })\n\n      entry.on('end', function () {\n        results.push(JSON.parse(result_json));\n\n        \n\n        \n      })\n    });\n\n    parse.on('error', function (err) {\n      parse.close();\n      reject(new Error(err));\n    })\n\n    parse.on('end', function (res) {\n      results = _.flatten(results);\n      \n      //TODO: implement linear sort uding operation id is linear from 0 to length-1\n      results.sort(function (result_a, result_b) {\n        return result_a.operation_id - result_b.operation_id\n      })\n\n      for (var i = 0; i < results.length; i++) {\n        results[i] = JSON.parse(results[i].response);\n      };\n\n      resolve(results)\n    })\n\n\n    request.get({\n      url : response_body_url,\n      encoding : null\n    }, function (err, response) {\n      if (err) {\n        reject(new Error(err));\n        return;\n      }\n      \n\n      if (response.statusCode != 200) {\n        reject(Object.assign(new Error(), response.body));\n        return;\n      }\n\n      var response_buffer = response.body;\n\n      zlib.gunzip(response_buffer, function (err, result) {\n        if (err) {\n          reject(new Error(err));\n          return;\n        }\n\n        parse.end(result)\n\n      })\n\n    })\n\n  })\n\n\n  \n}\n\nMailchimp.prototype.batchWait = function (batch_id, done, opts) {\n  var mailchimp = this; \n\n  //If done is not a function, and no opts are given, second argument is the opts\n  if (!opts && !_.isFunction(done)) {\n    opts = done;\n    done = null;\n  }\n\n  opts = _.clone(opts) || {};\n\n\n  if (!opts.interval) {\n    opts.interval = 2000\n  }\n  \n  //default unpack to true\n  if (opts.unpack !== false) {\n    opts.unpack = true;\n  }\n\n  //default verbose to true\n  if (opts.verbose !== false) {\n    opts.verbose = true;\n  }\n\n  var options = {\n    method : 'get',\n    path : '/batches/' + batch_id\n  }\n\n  var promise = new Promise(function (resolve, reject) {\n    var request = function () {\n      mailchimp.request(options)\n        .then(function (result) {\n          if (opts.verbose) {\n            console.log('batch status:', result.status, result.finished_operations + '/' + result.total_operations)\n          }\n          if (result.status == 'finished') {\n            resolve(result);\n            return;\n          }\n\n          setTimeout(request, opts.interval);\n\n      }, reject)\n    }\n\n    request();\n  })\n\n  if (opts.unpack) {\n    promise = promise.then(function (result) {\n\n      //in case the batch was empty, there is nothing to unpack (should no longer be hit)\n      if (result.total_operations == 0) {\n        return [];\n      }\n\n      return mailchimp._getAndUnpackBatchResults(result.response_body_url, opts)\n    })\n  }\n\n  //If a callback is used, resolve it and don't return the promise\n  if (done) {\n    promise\n      .then(function (result) {\n        done(null, result)\n      })\n      .catch(function (err) {\n        done(err);\n      })\n    return null;\n  }\n\n  return promise\n}\n\nMailchimp.prototype.batch = function (operations, done, opts) {\n  var mailchimp = this;\n\n  //If done is not a function, and no opts are given, second argument is the opts\n  if (!opts && !_.isFunction(done)) {\n    opts = done;\n    done = null;\n  }\n\n  opts = _.clone(opts) || {};\n\n\n  //TODO: Validate arguments and reject errors\n\n  //If the batch call does not get an operation, but a single normal call, return the result instead of a length 1 array\n  //This is useful for large get requests, like all subscribers of a list without paging\n  var should_unarray = false;\n  if (!_.isArray(operations)) {\n    operations = [operations]\n    should_unarray = true;\n  }\n\n  //default wait to true\n  if (opts.wait !== false) {\n    opts.wait = true;\n  }\n\n  //default unpack to true\n  if (opts.unpack !== false) {\n    opts.unpack = true;\n  }\n\n  //default verbose to true\n  if (opts.verbose !== false) {\n    opts.verbose = true;\n  }\n\n\n  //handle special case of empty batch with unpack.\n  //empty batches without unpack are still sent to mailchimp to get consistent responses from mailchimp\n  if (operations.length == 0 && opts.wait && opts.unpack) {\n    return Promise.resolve([]);\n  }\n\n\n  var _operations = [];\n  var id = 0;\n  _.each(operations, function (operation) {\n    var _operation = _.clone(operation);\n    _operation.operation_id = id.toString();\n    if (_operation.body) {\n      _operation.body = JSON.stringify(_operation.body);\n    }\n    _operation.path = formatPath(_operation.path, _operation.path_params);\n\n\n    if (_operation.method) {\n      _operation.method = _operation.method.toUpperCase();\n    }\n\n    if (_operation.query) {\n      _operation.params = _.assign({},_operation.query, _operation.params);\n      delete _operation.query\n    }\n\n    _operations.push(_operation);\n    id++;\n  })\n\n  var promise = mailchimp.request({\n    method : 'post',\n    path : '/batches',\n    body : {\n      operations : _operations  \n    }\n  })\n\n\n  if (opts.verbose) {\n    promise = promise.then(function (result) {\n      console.log('Batch started with id:', result.id);\n      return result\n    })\n  }\n\n  if (opts.wait) {\n    promise = promise.then(function (result) {\n      return mailchimp.batchWait(result.id, opts)\n    })\n  }\n\n  if (opts.wait && opts.unpack && should_unarray) {\n    promise = promise.then(function (result) {\n      if (result.length == 1) {\n        result = result[0];\n      }\n      return result\n    })\n  }\n\n\n  //If a callback is used, resolve it and don't return the promise\n  if (done) {\n    promise\n      .then(function (result) {\n        done(null, result)\n      })\n      .catch(function (err) {\n        done(err);\n      })\n    return null;\n  }\n\n  return promise\n\n  \n\n}\n\nMailchimp.prototype.request = function (options, done) {\n  var mailchimp = this;\n  var promise = new Promise(function(resolve, reject) {\n    if (!options) {\n      reject(new Error(\"No request options given\"));\n      return;\n    }\n\n    var path = formatPath(options.path, options.path_params);\n    var method = options.method || 'get';\n    var body = options.body || {};\n    var params = options.params;\n    var query = options.query;\n\n    //Parems used to refer to query parameters, because of the mailchimp documentation.\n    if (params) {\n      if (!query) {\n        query = params;\n      }\n    }\n\n    if (!path || !_.isString(path)) {\n      reject(new Error('No path given'))\n      return;\n    }\n\n    request({\n      method : method,\n      url : mailchimp.__base_url + path,\n      auth : {\n        user : 'any',\n        password : mailchimp.__api_key\n      },\n      json : body,\n      qs : query,\n      headers : {\n        'User-Agent' : 'mailchimp-api-v3 : https://github.com/thorning/node-mailchimp'\n      }\n    }, function (err, response) {\n\n      if (err) {\n        reject(new Error(err))\n        return;\n      }\n\n      if (response.statusCode < 200 || response.statusCode > 299) {\n        reject(Object.assign(new Error(response.body.detail), response.body));\n        return;\n      }\n\n      var result = response.body || {};\n      result.statusCode = response.statusCode;\n\n      resolve(result)\n    })\n\n  })\n\n  //If a callback is used, resolve it and don't return the promise\n  if (done) {\n    promise\n      .then(function (result) {\n        done(null, result)\n      })\n      .catch(function (err) {\n        done(err);\n      })\n    return null;\n  }\n\n  return promise\n}\n\n\nmodule.exports = exports = Mailchimp;\n"}